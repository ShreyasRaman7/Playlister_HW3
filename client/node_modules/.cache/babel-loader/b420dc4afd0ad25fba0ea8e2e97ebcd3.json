{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api, { getAllPlaylists } from '../api';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  UPDATE_LIST: \"UPDATE_LIST\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n\n      // START Updating list, for adding song atm\n      case GlobalStoreActionType.UPDATE_LIST:\n        {\n          console.log(\"inside UPDATE_LIST case\");\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n            //maybe add more later, will look into\n          });\n        }\n\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    console.log(\"entered the store index.js changeListName\");\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          //errors on this response\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  //shreyas trying delete list\n\n  store.markListForDelete = function (id) {\n    console.log(\"entered store mark list for delete\");\n    console.log(\"id: \" + id);\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    store.showDeleteListModal();\n  };\n  store.showDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.deleteMarkedList = function () {\n    console.log(\"entered deleteMarkedList\");\n    console.log(store.listMarkedForDeletion.id);\n    store.deleteList(store.listMarkedForDeletion);\n    store.hideDeleteListModal();\n  };\n  store.deleteList = function (id) {\n    console.log(\"entered deleteList\");\n    console.log(\"id:  \" + id);\n    async function deletePro(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        store.history.push(\"/\");\n      }\n    }\n    deletePro(id);\n  };\n\n  //shreyas trying to add new list \n  store.createNewList = function () {\n    console.log(\"entered createNewList\");\n    async function asyncCreateNewList() {\n      console.log(\"entered async createNewList\");\n      let newList1 = {\n        \"name\": \"Untitled\",\n        \"songs\": []\n      };\n      const response = await api.createPlaylist(newList1);\n      if (response.data.success) {\n        //if response successfully comes thru\n        console.log(\"if response data success store\");\n        let newPlaylist1 = response.data.playlist; //will plug this new playlist into \n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: newPlaylist1\n        });\n        store.history.push(\"/playlist/\" + newPlaylist1._id);\n      }\n    }\n    asyncCreateNewList(); //cretas newlist\n  };\n  //shreyas edits for set list name\n\n  //----------shreyas set list name ------------\n  //shreyas edits\n\n  //tryin to add song shreyas \n\n  store.addSongTransactionHandler = function (index1) {\n    let transaction = new AddSong_Transaction(store, index1); //store,index maybe\n    console.log('Shreyas inside the add song transaction handler within store index.js, sent here from add song transaction, in transactions.');\n    tps.addTransaction(transaction);\n  };\n  //now need to add store.addSong\n\n  store.addSong = function (index1, song1) {\n    let song = {\n      title: \"Untitled\",\n      artist: \"Unknown\"\n    };\n    store.currentList.songs.splice(index1, 0, song1);\n    store.updateMyPlaylist();\n  };\n  store.updateMyPlaylist = function () {\n    async function updateMyPlaylist() {\n      console.log(\"inside shreyas updatemyplaylist\");\n      let response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n      console.log(\"test before response data success check\");\n      if (response.data.success) {\n        console.log(\"seeing if response.data.success\");\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n      console.log(\"seeing if update my playlist works after store reducer\");\n    }\n    updateMyPlaylist();\n  };\n\n  //\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setListNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"5esZRSaCUwjeueF8RbldueI12xo=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","getAllPlaylists","AddSong_Transaction","DeleteSong_Transaction","MoveSong_Transaction","EditSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","UPDATE_LIST","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","listMarkedForDeletion","console","log","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","markListForDelete","showDeleteListModal","modal","document","getElementById","classList","add","hideDeleteListModal","remove","deleteMarkedList","deleteList","deletePro","deletePlaylistById","loadIdNamePairs","history","push","createNewList","asyncCreateNewList","newList1","createPlaylist","newPlaylist1","addSongTransactionHandler","index1","transaction","addTransaction","addSong","song1","song","title","artist","songs","splice","updateMyPlaylist","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setListNameActive"],"sources":["/Users/shreyasraman/Documents/CSE316/HW3_CSE316/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api, { getAllPlaylists } from '../api'\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\n\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    UPDATE_LIST: \"UPDATE_LIST\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: payload\n\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n\n            // START Updating list, for adding song atm\n            case GlobalStoreActionType.UPDATE_LIST: {\n                console.log(\"inside UPDATE_LIST case\")\n                    return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    //maybe add more later, will look into\n                });\n            }\n\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        console.log(\"entered the store index.js changeListName\");\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    //errors on this response\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    //shreyas trying delete list\n    \n    store.markListForDelete = function (id){\n        console.log(\"entered store mark list for delete\");\n        console.log( \"id: \"+ id);\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id\n        });\n        store.showDeleteListModal();\n\n    }\n    store.showDeleteListModal =function(){\n        let modal=document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    store.hideDeleteListModal =function(){\n        let modal=document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    store.deleteMarkedList=function(){\n        console.log(\"entered deleteMarkedList\");\n\n        console.log(store.listMarkedForDeletion.id);\n        store.deleteList(store.listMarkedForDeletion);\n        store.hideDeleteListModal();\n    }\n    store.deleteList = function(id){\n        console.log(\"entered deleteList\");\n        console.log( \"id:  \"+id);\n        async function deletePro(id){\n            let response = await api.deletePlaylistById(id);\n            if(response.data.success)     {\n                store.loadIdNamePairs();\n                store.history.push(\"/\");\n            }   \n        }\n        deletePro(id);\n    }\n    \n\n    //shreyas trying to add new list \n    store.createNewList = function(){\n        console.log(\"entered createNewList\");\n        async function asyncCreateNewList(){\n            console.log(\"entered async createNewList\");\n            let newList1 ={\n                \"name\": \"Untitled\",\n                \"songs\": []\n            };\n        \n        const response = await api.createPlaylist(newList1);\n        if(response.data.success){\n            //if response successfully comes thru\n            console.log(\"if response data success store\");\n            let newPlaylist1 = response.data.playlist; //will plug this new playlist into \n            storeReducer({\n               type: GlobalStoreActionType.CREATE_NEW_LIST, payload:newPlaylist1 \n            });\n            store.history.push(\"/playlist/\" + newPlaylist1._id);\n\n        }\n        }\n        asyncCreateNewList(); //cretas newlist\n        \n    }\n    //shreyas edits for set list name\n\n    //----------shreyas set list name ------------\n    //shreyas edits\n\n\n\n\n    //tryin to add song shreyas \n\n    store.addSongTransactionHandler = function(index1){\n        let transaction= new AddSong_Transaction(store,index1); //store,index maybe\n        console.log('Shreyas inside the add song transaction handler within store index.js, sent here from add song transaction, in transactions.')\n        tps.addTransaction(transaction);\n\n    }\n    //now need to add store.addSong\n    \n    store.addSong =function(index1,song1){\n        let song = {\n            title: \"Untitled\",\n            artist: \"Unknown\",\n            \n        }\n        store.currentList.songs.splice(index1,0,song1);\n        store.updateMyPlaylist();\n\n    }\n     \n    store.updateMyPlaylist = function(){\n        \n        async function updateMyPlaylist(){\n            console.log(\"inside shreyas updatemyplaylist\");\n            let response = await api.updatePlaylistById(store.currentList._id, store.currentList)\n            console.log(\"test before response data success check\");\n            if (response.data.success){\n                console.log(\"seeing if response.data.success\");\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST, payload: store.currentList\n                })\n            }\n            console.log(\"seeing if update my playlist works after store reducer\")\n        }\n        updateMyPlaylist();\n    }\n\n   \n\n    //\n\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setListNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}